/**
 * @author Conor johnson Martin 101106217
 * @date April 4th, 2021
 * @version Version 1
 */

import java.util.ArrayList;
import java.util.Scanner;

/**
 * A class that builds a game of dice that can be played by a user through the terminal.
 */
public class DiceGame {

    private int numberOfSides;
    private int numberOfDice;
    private int bet;
    private Die die;

    /**
     * A default constructor for the DiceGame class that initializes the default values of numberOfDice and numberOfSides to 2 and 6 respectively.
     */
    public DiceGame() {
        this.numberOfDice = 2;
        this.numberOfSides = 6;
        this.die = new Die();
    }

    /**
     * A constructor for the DiceGame class that initializes different values for numberOfDice and numberOfSides.
     * @param numOfSides sets the max value that can be represented on a die. ie. range from 1 - numOfSides.
     * @param numOfDice sets the number of dice that are to be rolled.
     */
    public DiceGame(int numOfSides, int numOfDice) {
        this.numberOfSides = numOfSides;
        this.numberOfDice = numOfDice;
        this.die = new Die(numOfSides);
    }

    /**
     * A method that builds the body of the Game of Dice.
     */
    public void play() {
        System.out.println("Welcome to the Game of Dice!");
        System.out.println("Starting a game with " + numberOfDice + " " + numberOfSides + "-sided dice.");
        System.out.println("-------------------------------------------------");

        //Initialize variables.
        int bet = 0;
        int userCredit = 100;
        int computerCredit = 100;

        //Initialize ArrayList's that will keep track of teh values that get randomly generated by the Die class.
        ArrayList<Integer> userDice = new ArrayList<Integer>();
        ArrayList<Integer> computerDice = new ArrayList<Integer>();

        //While the user has not decided to quit, the user has chosen a dice with 2 or more sides, and that both the user and computer have more than zero credit.
        while(bet != -1 && numberOfSides >= 2 && userCredit != 0 && computerCredit != 0) {
            System.out.println("You have $" + userCredit + ".");
            System.out.println("The computer has $" + computerCredit + ".");
            System.out.println("Place your bet (-1 to quit playing) ");
            Scanner that = new Scanner(System.in);
            bet = Integer.parseInt(that.nextLine());

            //Checks 1st time if user wants to exit if bet has been set to -1.
            if(bet == -1){
                System.out.println("You have quit the Game of Dice");
                break;
            }

            //If bet is greater than what teh user has in credit, user will be prompted to re-enter a new wager here.
            while(bet > userCredit) {
                System.out.println("You have to bet a positive value, but less than your remaining money!");
                System.out.println("Place your bet (-1 to quit playing) ");
                Scanner nice = new Scanner(System.in);
                bet = Integer.parseInt(nice.nextLine());
            }

            //Checks 2nd time if user wants to exit if bet has been set to -1.
            if(bet == -1){
                System.out.println("You have quit the Game of Dice");
                break;
            }

            //Rolls dice and stores values into each respective ArrayList.
            for(int i = 0; i < numberOfDice; i++) {
                int userRolledDice = die.roll();
                int computerRolledDice = die.roll();
                userDice.add(userRolledDice);
                computerDice.add(computerRolledDice);
            }

            System.out.println(numberOfDice + " Dice :: You rolled > " + userDice.toString());
            System.out.println(numberOfDice + " Dice :: Computer rolled > " + computerDice.toString());

            //Sums the values in the ArrayLists.
            int userSum = 0;
            int compSum = 0;
            for(int i = 0; i < userDice.size(); i++) {
                userSum += userDice.get(i);
                compSum += computerDice.get(i);
            }

            //Checks if user wins the dice throw and if the computer still has more credit that what the user wagered.
            if(userSum > compSum && (!(bet > computerCredit))) {
                userCredit = userCredit + bet;
                computerCredit = computerCredit - bet;
                System.out.println("You win this round! You have gained $" + bet);
            }

            //Checks if the user wins the dice throw but also if the computer had less credit that teh wager the user placed. If true then set computer credit to zero and you will exit the while loop.
            if(userSum > compSum && (bet > computerCredit)){
                userCredit = userCredit + computerCredit;
                computerCredit = 0;
            }

            //Checks if the computer wins the dice toss and subtracts the bet accordingly
            if(compSum > userSum) {
                userCredit = userCredit - bet;
                computerCredit = computerCredit + bet;
                System.out.println("The computer wins this round! You have lost $" + bet);
            }

            //Checks if the user and the computer tie in the coin toss
            if(compSum == userSum) {
                System.out.println("You have tied with the computer! Nobody wins.");
            }
            userDice.clear();
            computerDice.clear();
            System.out.println("-------------------------------------------------");
        }
        if(computerCredit == 0) {
            System.out.println("Congratulations! You have won the Game of Dice!");
        }
        if(userCredit == 0) {
            System.out.println("The Computer has won the Game of Dice! Better luck next time! You are out of credit!");
        }
    }

    /**
     * The main method that allows for the game to be compiled and played.
     * @param args Array of Strings.
     */
    public static void main(String[] args) {
        System.out.println("You typed >>> java DiceGame");
        DiceGame game;
        if (args.length == 2) {
            game = new DiceGame(Integer.parseInt(args[0]), Integer.parseInt(args[1]));
        }else{
            game = new DiceGame();
        }
        game.play();
    }
}